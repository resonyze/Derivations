diff -Nup dwm-6.2-original/config.def.h dwm-6.2/config.def.h
--- dwm-6.2-original/config.def.h	2019-06-17 11:37:06.363441787 +0530
+++ dwm-6.2/config.def.h	2019-06-17 12:08:57.382895481 +0530
@@ -94,6 +94,14 @@ static Key keys[] = {
 	TAGKEYS(                        XK_8,                      7)
 	TAGKEYS(                        XK_9,                      8)
 	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
+    { MODKEY|ShiftMask,				XK_j,	   moveresize,	   {.v = (int []){ 0, 75, 0, 0 }}},
+    { MODKEY|ShiftMask,				XK_k,	   moveresize,	   {.v = (int []){ 0, -75, 0, 0 }}},
+    { MODKEY|ShiftMask,				XK_l,	   moveresize,     {.v = (int []){ 75, 0, 0, 0 }}},
+    { MODKEY|ShiftMask,				XK_h,	   moveresize,	   {.v = (int []){ -75, 0, 0, 0 }}},
+    { Mod4Mask,			            XK_j,	   moveresize,	   {.v = (int []){ 0, 0, 0, 25 }}},
+    { Mod4Mask,			            XK_k,	   moveresize,	   {.v = (int []){ 0, 0, 0, -25 }}},
+    { Mod4Mask,			            XK_l,	   moveresize,	   {.v = (int []){ 0, 0, 25, 0 }}},
+    { Mod4Mask,			            XK_h,	   moveresize,	   {.v = (int []){ 0, 0, -25, 0 }}},
 };
 
 /* button definitions */
diff -Nup dwm-6.2-original/dwm.c dwm-6.2/dwm.c
--- dwm-6.2-original/dwm.c	2019-06-17 11:37:06.363441787 +0530
+++ dwm-6.2/dwm.c	2019-06-17 11:42:02.857597276 +0530
@@ -183,6 +183,7 @@ static void maprequest(XEvent *e);
 static void monocle(Monitor *m);
 static void motionnotify(XEvent *e);
 static void movemouse(const Arg *arg);
+static void moveresize(const Arg *arg);
 static Client *nexttiled(Client *c);
 static void pop(Client *);
 static void propertynotify(XEvent *e);
@@ -271,6 +272,22 @@ static Window root, wmcheckwin;
 /* configuration, allows nested code to access above variables */
 #include "config.h"
 
+static void
+moveresize(const Arg *arg)
+{
+	XEvent ev;
+	Monitor *m = selmon;
+	
+	if(!(m->sel && arg && arg->v && m->sel->isfloating))
+return;
+
+	// resize(m->sel, m->sel->x + ((int *)arg->v)[0],m->sel->y + ((int )arg->v)[1], m->sel->w + ((int )arg->v)[2], m->sel->h + ((int *)arg->v)[3], True);
+    resize(m->sel, m->sel->x + ((int *)arg->v)[0], m->sel->y + ((int *)arg->v)[1], m->sel->w + ((int *)arg->v)[2], m->sel->h + ((int *)arg->v)[3], True);
+
+	
+	while(XCheckMaskEvent(dpy, EnterWindowMask, &ev));
+}
+
 /* compile-time check if all tags fit into an unsigned int bit array. */
 struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
 
diff -Nup dwm-6.2-original/moveresize.c dwm-6.2/moveresize.c
--- dwm-6.2-original/moveresize.c	1970-01-01 05:30:00.000000000 +0530
+++ dwm-6.2/moveresize.c	2019-06-17 11:38:17.631542265 +0530
@@ -0,0 +1,64 @@
+void
+moveresize(const Arg *arg) {
+	/* only floating windows can be moved */
+	Client *c;
+	c = selmon->sel;
+	int x, y, w, h, nx, ny, nw, nh, ox, oy, ow, oh;
+	char xAbs, yAbs, wAbs, hAbs;
+	int msx, msy, dx, dy, nmx, nmy;
+	unsigned int dui;
+	Window dummy;
+
+	if (!c || !arg)
+		return;
+	if (selmon->lt[selmon->sellt]->arrange && !c->isfloating)
+		return;
+	if(sscanf((char *)arg->v, "%d%c %d%c %d%c %d%c", &x, &xAbs, &y, &yAbs, &w, &wAbs, &h, &hAbs) != 8)
+		return;
+	/* compute new window position; prevent window from be positioned outside the current monitor */
+	nw = c->w + w;
+	if(wAbs == 'W')
+		nw = w < selmon->mw - 2 * c->bw ? w : selmon->mw - 2 * c->bw;
+
+	nh = c->h + h;
+	if(hAbs == 'H')
+		nh = h < selmon->mh - 2 * c->bw ? h : selmon->mh - 2 * c->bw;
+
+	nx = c->x + x;
+	if(xAbs == 'X') {
+		if(x < selmon->mx)
+			nx = selmon->mx;
+		else if(x > selmon->mx + selmon->mw)
+			nx = selmon->mx + selmon->mw - nw - 2 * c->bw;
+		else
+			nx = x;
+	}
+
+	ny = c->y + y;
+	if(yAbs == 'Y') {
+		if(y < selmon->my)
+			ny = selmon->my;
+		else if(y > selmon->my + selmon->mh)
+			ny = selmon->my + selmon->mh - nh - 2 * c->bw;
+		else
+			ny = y;
+	}
+
+	ox = c->x;
+	oy = c->y;
+	ow = c->w;
+	oh = c->h;
+
+	XRaiseWindow(dpy, c->win);
+	Bool xqp = XQueryPointer(dpy, root, &dummy, &dummy, &msx, &msy, &dx, &dy, &dui);
+	resize(c, nx, ny, nw, nh, True);
+
+	/* move cursor along with the window to avoid problems caused by the sloppy focus */
+	if (xqp && ox <= msx && (ox + ow) >= msx && oy <= msy && (oy + oh) >= msy)
+	{
+		nmx = c->x - ox + c->w - ow;
+		nmy = c->y - oy + c->h - oh;
+		XWarpPointer(dpy, None, None, 0, 0, 0, 0, nmx, nmy);
+	}
+}
+
